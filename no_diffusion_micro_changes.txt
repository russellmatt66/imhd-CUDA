diff --git a/src/on-device/no_diffusion_micro.cu b/src/on-device/no_diffusion_micro.cu
index 40ca5cf..917d15a 100644
--- a/src/on-device/no_diffusion_micro.cu
+++ b/src/on-device/no_diffusion_micro.cu
@@ -23,46 +23,47 @@ int main(int argc, char* argv[]){
    int Nz = atoi(argv[4]);
 
    float J0 = atof(argv[5]); // amplitude of the current
-	float r_max_coeff = atof(argv[6]); // r_pinch = r_max_coeff * r_max
-	
-   float x_min = atof(argv[7]);
-	float x_max = atof(argv[8]);
-	float y_min = atof(argv[9]);
-	float y_max = atof(argv[10]);
-	float z_min = atof(argv[11]);
-	float z_max = atof(argv[12]);
-	float dt = atof(argv[13]);
+   float D = atof(argv[6]); // diffusion
+   float r_max_coeff = atof(argv[7]); // r_pinch = r_max_coeff * r_max
    
-   std::string path_to_data = argv[14];
-   std::string phdf5_bin_name = argv[15];
-   std::string attr_bin_name = argv[16];
-   std::string write_grid_bin_name = argv[17];
-   std::string eigen_bin_name = argv[18];
-   std::string num_proc = argv[19];
-
-   int xgrid_threads = atoi(argv[20]);
-   int ygrid_threads = atoi(argv[21]);
-   int zgrid_threads = atoi(argv[22]);
-
-   int init_xthreads = atoi(argv[23]);
-   int init_ythreads = atoi(argv[24]);
-   int init_zthreads = atoi(argv[25]);
+   float x_min = atof(argv[8]);
+   float x_max = atof(argv[9]);
+   float y_min = atof(argv[10]);
+   float y_max = atof(argv[11]);
+   float z_min = atof(argv[12]);
+   float z_max = atof(argv[13]);
+   float dt = atof(argv[14]);
    
-   int FA_xthreads = atoi(argv[26]);
-   int FA_ythreads = atoi(argv[27]);
-   int FA_zthreads = atoi(argv[28]);
+   std::string path_to_data = argv[15];
+   std::string phdf5_bin_name = argv[16];
+   std::string attr_bin_name = argv[17];
+   std::string write_grid_bin_name = argv[18];
+   std::string eigen_bin_name = argv[19];
+   std::string num_proc = argv[20];
+
+   int xgrid_threads = atoi(argv[21]);
+   int ygrid_threads = atoi(argv[22]);
+   int zgrid_threads = atoi(argv[23]);
+
+   int init_xthreads = atoi(argv[24]);
+   int init_ythreads = atoi(argv[25]);
+   int init_zthreads = atoi(argv[26]);
+   
+   int FA_xthreads = atoi(argv[27]);
+   int FA_ythreads = atoi(argv[28]);
+   int FA_zthreads = atoi(argv[29]);
 
-   int SM_mult_grid_x = atoi(argv[29]);
-   int SM_mult_grid_y = atoi(argv[30]);
-   int SM_mult_grid_z = atoi(argv[31]);
+   int SM_mult_grid_x = atoi(argv[30]);
+   int SM_mult_grid_y = atoi(argv[31]);
+   int SM_mult_grid_z = atoi(argv[32]);
 
-	int SM_mult_init_x = atoi(argv[32]);
-	int SM_mult_init_y = atoi(argv[33]);
-	int SM_mult_init_z = atoi(argv[34]);
+   int SM_mult_init_x = atoi(argv[33]);
+   int SM_mult_init_y = atoi(argv[34]);
+   int SM_mult_init_z = atoi(argv[35]);
 
-   int SM_mult_FA_x = atoi(argv[35]);
-   int SM_mult_FA_y = atoi(argv[36]);
-   int SM_mult_FA_z = atoi(argv[37]);
+   int SM_mult_FA_x = atoi(argv[36]);
+   int SM_mult_FA_y = atoi(argv[37]);
+   int SM_mult_FA_z = atoi(argv[38]);
 
    // CUDA BOILERPLATE 
    int deviceId;
@@ -91,34 +92,38 @@ int main(int argc, char* argv[]){
 	float dz = (z_max - z_min) / (Nz - 1);
 
    // Execution grid and threadblock configurations for the Grid Initialization microkernels
-   dim3 egd_xgrid(SM_mult_grid_x * numberOfSMs, 1, 1); // "egd" = "execution_grid_dimensions"
-   dim3 egd_ygrid(1, SM_mult_grid_y * numberOfSMs, 1);
-   dim3 egd_zgrid(1, 1, SM_mult_grid_z * numberOfSMs);
+   // dim3 egd_xgrid(SM_mult_grid_x * numberOfSMs, 1, 1); // "egd" = "execution_grid_dimensions"
+   // dim3 egd_ygrid(1, SM_mult_grid_y * numberOfSMs, 1);
+   // dim3 egd_zgrid(1, 1, SM_mult_grid_z * numberOfSMs);
 
-   dim3 tbd_xgrid(xgrid_threads, 1, 1); // "tbd = thread_block_dimensions"
-   dim3 tbd_ygrid(1, ygrid_threads, 1);
-   dim3 tbd_zgrid(1, 1, zgrid_threads);
+   // dim3 tbd_xgrid(xgrid_threads, 1, 1); // "tbd = thread_block_dimensions"
+   // dim3 tbd_ygrid(1, ygrid_threads, 1);
+   // dim3 tbd_zgrid(1, 1, zgrid_threads);
    
-   // Execution grid and threadblock configurations for the 
-   dim3 egd_init(SM_mult_init_x * numberOfSMs, SM_mult_init_y * numberOfSMs, SM_mult_init_z * numberOfSMs);
-   dim3 tbd_init(init_xthreads, init_ythreads, init_zthreads); 
+   // Execution grid and threadblock configurations for the Grid Initialization kernels
+   dim3 egd_grid(SM_mult_grid_x * numberOfSMs, SM_mult_grid_y * numberOfSMs, SM_mult_grid_z * numberOfSMs);
+   std::cout << "egd_grid is: (" << egd_grid.x << "," << egd_grid.y << "," << egd_grid.z << ")" << std::endl;
 
-   // TODO: Microkernels should be in a wrapper   
-   // InitializeGrid<<<exec_grid_dims_grid, mesh_block_dims>>>(x_min, x_max, y_min, y_max, z_min, z_max, dx, dy, dz, x_grid, y_grid, z_grid, Nx, Ny, Nz);
-   InitializeX<<<egd_xgrid, tbd_xgrid>>>(x_grid, x_min, dx, Nx);
-   InitializeY<<<egd_ygrid, tbd_ygrid>>>(y_grid, y_min, dy, Ny);
-   InitializeZ<<<egd_zgrid, tbd_zgrid>>>(z_grid, z_min, dz, Nz);
-   ZeroVars<<<egd_init, tbd_init>>>(fluidvars, Nx, Ny, Nz); 
-   checkCuda(cudaDeviceSynchronize());
+   dim3 tbd_grid(xgrid_threads, ygrid_threads, zgrid_threads);
+   std::cout << "tbd_grid is: (" << tbd_grid.x << "," << tbd_grid.y << "," << tbd_grid.z << ")" << std::endl;
 
-   ScrewPinch<<<egd_init, tbd_init>>>(fluidvars, J0, r_max_coeff, x_grid, y_grid, z_grid, Nx, Ny, Nz);
-   checkCuda(cudaDeviceSynchronize());
+   // Execution grid and threadblock configurations for the initialization kernels
+   dim3 egd_init(SM_mult_init_x * numberOfSMs, SM_mult_init_y * numberOfSMs, SM_mult_init_z * numberOfSMs);
+   std::cout << "egd_init is: (" << egd_init.x << "," << egd_init.y << "," << egd_init.z << ")" << std::endl;
+
+   dim3 tbd_init(init_xthreads, init_ythreads, init_zthreads); 
+   std::cout << "tbd_init is: (" << tbd_init.x << "," << tbd_init.y << "," << tbd_init.z << ")" << std::endl;
 
    // Execution grid and threadblock configurations for the Boundary Condition microkernels
    dim3 egd_bdry_leftright(numberOfSMs, 1, numberOfSMs);
    dim3 egd_bdry_topbottom(1, numberOfSMs, numberOfSMs);
    dim3 egd_bdry_frontback(numberOfSMs, numberOfSMs, 1);
 
+   // Execution grid specification for the Qint BCs - they require specifying values along certain lines
+   dim3 egd_qintbdry_frontright(numberOfSMs, 1, 1); 
+   dim3 egd_qintbdry_frontbottom(1, numberOfSMs, 1);
+   dim3 egd_qintbdry_bottomright(1, 1, numberOfSMs);
+   
    dim3 tbd_bdry_leftright(8, 1, 8);
    dim3 tbd_bdry_topbottom(1, 8, 8);
    dim3 tbd_bdry_frontback(8, 8, 1); // can also be used for PBCs
@@ -126,16 +131,32 @@ int main(int argc, char* argv[]){
    dim3 tbd_qintbdry_frontbottom(1, 1024, 1);
    dim3 tbd_qintbdry_bottomright(1, 1, 1024);
 
+   // Execution grid and threadblock configurations for the Predictor and Corrector microkernels
+   dim3 egd_fluidadvance(SM_mult_FA_x * numberOfSMs, SM_mult_FA_y * numberOfSMs, SM_mult_FA_z * numberOfSMs);
+   std::cout << "egd_fluidadvance is: (" << egd_fluidadvance.x << "," << egd_fluidadvance.y << "," << egd_fluidadvance.z << ")" << std::endl;
+
+   dim3 tbd_fluidadvance(FA_xthreads, FA_ythreads, FA_zthreads); 
+   std::cout << "tbd_fluidadvance is: (" << tbd_fluidadvance.x << "," << tbd_fluidadvance.y << "," << tbd_fluidadvance.z << ")" << std::endl;
+
+   // dim3 tbd_fluidadvance(6, 6, 6); 
+
+   // TODO: Microkernels should be in a wrapper   
+   InitializeGrid<<<egd_grid, tbd_grid>>>(x_min, x_max, y_min, y_max, z_min, z_max, dx, dy, dz, x_grid, y_grid, z_grid, Nx, Ny, Nz);
+   // InitializeX<<<egd_xgrid, tbd_xgrid>>>(x_grid, x_min, dx, Nx);
+   // InitializeY<<<egd_ygrid, tbd_ygrid>>>(y_grid, y_min, dy, Ny);
+   // InitializeZ<<<egd_zgrid, tbd_zgrid>>>(z_grid, z_min, dz, Nz);
+   // ZeroVars<<<egd_init, tbd_init>>>(fluidvars, Nx, Ny, Nz); 
+   checkCuda(cudaDeviceSynchronize());
+
+   // ScrewPinch<<<egd_init, tbd_init>>>(fluidvars, J0, r_max_coeff, x_grid, y_grid, z_grid, Nx, Ny, Nz);
+   ScrewPinchLoop<<<egd_init, tbd_init>>>(fluidvars, J0, x_grid, y_grid, z_grid, Nx, Ny, Nz);
+   checkCuda(cudaDeviceSynchronize());
+
    rigidConductingWallBCsLeftRight<<<egd_bdry_leftright, tbd_bdry_leftright>>>(fluidvars, Nx, Ny, Nz);
    rigidConductingWallBCsTopBottom<<<egd_bdry_topbottom, tbd_bdry_topbottom>>>(fluidvars, Nx, Ny, Nz);
    PBCs<<<egd_bdry_frontback, tbd_bdry_frontback>>>(fluidvars, Nx, Ny, Nz);
    checkCuda(cudaDeviceSynchronize());
 
-   // Execution grid and threadblock configurations for the Predictor and Corrector microkernels
-   dim3 egd_fluidadvance(SM_mult_FA_x * numberOfSMs, SM_mult_FA_y * numberOfSMs, SM_mult_FA_z * numberOfSMs);
-   
-   dim3 tbd_fluidadvance(FA_xthreads, FA_ythreads, FA_zthreads); 
-
    // ComputeIntermediateVariablesNoDiff<<<exec_grid_dims_intvar, intvar_block_dims>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
    ComputeIntRhoMicroLocalNoDiff<<<egd_fluidadvance, tbd_fluidadvance>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
    ComputeIntRhoVXMicroLocalNoDiff<<<egd_fluidadvance, tbd_fluidadvance>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
@@ -146,11 +167,6 @@ int main(int argc, char* argv[]){
    ComputeIntBZMicroLocalNoDiff<<<egd_fluidadvance, tbd_fluidadvance>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
    ComputeIntEMicroLocalNoDiff<<<egd_fluidadvance, tbd_fluidadvance>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
    checkCuda(cudaDeviceSynchronize());    
-   
-   // Execution grid specification for the Qint BCs - they require specifying values along certain lines
-   dim3 egd_qintbdry_frontright(numberOfSMs, 1, 1); 
-   dim3 egd_qintbdry_frontbottom(1, numberOfSMs, 1);
-   dim3 egd_qintbdry_bottomright(1, 1, numberOfSMs);
 
    QintBdryFrontNoDiff<<<egd_bdry_frontback, tbd_bdry_frontback>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
    QintBdryLeftRightNoDiff<<<egd_bdry_leftright, tbd_bdry_leftright>>>(fluidvars, intvars, dt, dx, dy, dz, Nx, Ny, Nz);
